machine:
  services:
    - docker

general:
  artifacts:
    - "src/webapp/client/log"

dependencies:
  cache_directories:
    - "~/docker"

  override:
    - docker info
    - docker --version
    - sudo pip install -U docker-compose==1.5.2
    - cp src/db/secrets.example.env src/db/secrets.env
    # If there's a base image cached, load it.
    # A click on CircleCI's "Clear Cache" will make sure we start with a clean slate.
    - mkdir -p ~/docker
    - if [[ -e ~/docker/images.tar ]]; then docker load -i ~/docker/images.tar; fi
    # If cache doesn't exist, pull the base images so we can easily save them later
    - if [[ ! -e ~/docker/images.tar ]]; then docker pull leaguewinspool/webapp-base:1; fi
    - if [[ ! -e ~/docker/images.tar ]]; then docker pull mysql:5.6; fi
    - if [[ ! -e ~/docker/images.tar ]]; then docker pull nginx:1.9.0; fi
    - (cd src; docker-compose -f docker-production.yml build)
    # Otherwise, we built one above, and save it.
    - if [[ ! -e ~/docker/images.tar ]]; then docker save -o ~/docker/images.tar leaguewinspool/webapp-base:1 mysql:5.6 nginx:1.9.0; fi
    # Print the history so that we can investigate potential steps which fatten
    # the image needlessly.
    - docker history src_webapp
    # Bring up Sails and run database migrations
    - (cd src; docker-compose -f docker-production.yml run -e LOG_LEVEL=verbose webapp grunt db:migrate:up)

test:
  override:
    # Run tests
    - (cd src; docker-compose -f docker-production.yml run webapp npm test)
    # Publish code coverage data to CodeClimate. $CODECLIMATE_REPO_TOKEN is an environment variable setup in CircleCI.
    - npm install -g codeclimate-test-reporter@0.1.1
    # Disabled until we get tests reporting to lcov again
    # - (cd src/webapp; CODECLIMATE_REPO_TOKEN=$CODECLIMATE_REPO_TOKEN codeclimate-test-reporter < log/coverage/report-lcov/lcov.info)

deployment:
  hub:
    # Notify DockerHub to build the new container once the tests pass
    # Set on https://circleci.com/gh/league-wins-pool/league-wins-pool/edit#env-vars
    # From https://blog.rainforestqa.com/2014-12-08-docker-in-action-from-deployment-to-delivery-part-2-continuous-integration/
    branch: master
    commands:
      - $DEPLOY_WEBAPP
