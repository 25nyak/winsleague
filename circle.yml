machine:
  node:
    version: 5.2.0

general:
  artifacts:
    - "app/.meteor/local/log"
    - "log"
    - "app/report.json" # from meteor_coverage's out_coverage
    - "app/lcov.info"

dependencies:
  cache_directories:
    - "~/.npm"
    - "~/.meteor"
    - "app/node_modules"
    - "app/.meteor/local/build"
    - "app/.meteor/local/bundler-cache"
    - "app/.meteor/local/isopacks"
    - "app/.meteor/local/plugin-cache"
    - "/home/ubuntu/nvm/versions/node/v5.2.0/bin"
    - "/home/ubuntu/nvm/versions/node/v5.2.0/lib/node_modules"

  override:
    - (cd app; ./.testing/upgrade_chrome_version.sh)
    - (cd app; ./.testing/cache_meteor.sh)
    - (cd app; ./.testing/cache_npm_dependencies.sh)
    - (cd app; ./.testing/cache_build_and_dependencies.sh)
    - (cd app; chimp --path=features) # Cache chimp deps by running it without any tests

checkout:
  post:
    - git submodule update --init

test:
  override:
    # Run tests
    - (cd app; meteor npm run test-coverage-app-unit)
    - (cd app; meteor npm run test-coverage-app-full)
    - (cd app; meteor npm run test-app) # see if this passes when coverage fails
    - (cd app; ./tests/acceptance_run)

    # Publish code coverage data to CodeClimate. $CODECLIMATE_REPO_TOKEN is an environment variable setup in CircleCI.
    - npm install -g codeclimate-test-reporter@0.3.3
    - (cd app; CODECLIMATE_REPO_TOKEN=$CODECLIMATE_REPO_TOKEN codeclimate-test-reporter < lcov.info)

deployment:
  production:
    branch: master
    commands:
      # Decrypt Meteor Up config
      - (cd config/production; gpg --no-use-agent --quiet --passphrase $MUP_PASSPHRASE -o mup.json -d mup.json.gpg)

      # Deploy
      - npm install -g mup # install meteor-up for deployment
      - (cd config/production; mup deploy)

      # Notify Rollbar about deploy
      - curl https://api.rollbar.com/api/1/deploy/ -F access_token=$ROLLBAR_SERVER_ACCESS_TOKEN -F environment=production -F revision=$CIRCLE_SHA1 -F local_username=$CIRCLE_USERNAME
